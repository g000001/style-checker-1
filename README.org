* STYLE-CHECKER-1
- Symbolicsのstyle-checkerを真似てみようというもの

** export
- style-checker
- clear-style-checkers
  スタイルチェッカーを全削除
- put-style-checker
  スタイルチェッカーを登録(関数単位で登録)
#+begin_src lisp
(put-style-checker 'cl:let
                   'lint
                   (lambda (form)
                     (let ((mesg (lint::check-varlist (second form))))
                       (when mesg
                         (sb-c::compiler-style-warn mesg)))))
#+end_src
- remove-style-checker
  スタイルチェッカーを登録(関数単位で削除)
- call-style-checkers
  シンボルに割り付けられたスタイルチェッカーをすべて呼ぶ

* 参考
** Symbolics Open Genera: Program Development Utilities (Page 118)
*** compiler:style-checker
Defines a style checker. Note: compiler:style-checker is not a function but rather,
a function-spec. A style checker is a Lisp function associated with a symbol. When
the compiler compiles an S-expression with that symbol in the functional position
car, it calls all of the style checkers for the symbol with an argument of the form.
These style checkers can examine the form and call warn if they detect something
wrong. checker-name is the name of your style checker function, and symbol is the
symbol that you want to check. arg1 and arg2 are optional arguments to your style
checker function.
You define a style checker as follows:
#+begin_src lisp
(defun (compiler:style-checker style-checker-name function-symbol) (form)
  body-that-looks-at-the-form...
  )
#+end_src
You can have multiple style checkers on a single function symbol. For example, as-
sume that you define function to take a first argument that must be a number,
and which is often a constant.
#+begin_src lisp
(defun stylish-function (number &rest other-args)
  )
#+end_src
You might write:
#+begin_src lisp
(defun (compiler:style-checker first-arg-must-be-numeric stylish-function) (form)
  (destructuring-bind (ignore number &rest ignore) form
    (when (and (compiler:constant-form-p number)
               (not (numberp (compiler:constant-evaluator number))))
      (warn "The first argument ~S to ~S is not a number." number ’stylish-function))))
#+end_src
In the example, the function compiler:constant-form-p simply checks if the form
is treated as a constant by the compiler; the function compiler:constant-evaluator
returns the value of a constant. You have to be very careful about how you exam-
ine arguments. The form in the example code is uncompiled list structure. If the
caller is passing a variable as an argument
(stylish-function foo)
then the form will contain the symbol foo as the second element. foo is not a con-
stant, so you cannot tell what its runtime value is at compile time.
The pre-Genera 7.0 way of style checking using property lists is also supported,
but you cannot use both the new and the old technology on the same checked
function. In the old way, style checking is implemented by the compiler:style-
checker property on a symbol; the value of the property is called on all forms
whose car is that symbol, except those immediately enclosed in inhibit-style-
warnings. Obsolete function warnings are also performed by means of the style-
checking mechanism.
#+begin_src lisp
inhibit-style-warnings form Function
#+end_src
Prevents the compiler from performing style-checking on the top level of form;
style-checking will still be done on the arguments of form.
The following code warns you about the obsolete function zl:explode, since inhibit-
style-warnings applies only to the top level of the form inside it, in this case, to
the setq.
Generate warning:
#+begin_src lisp
(inhibit-style-warnings (setq bar (explode foo)))
#+end_src
The following code, on the other hand, does not warn that explode is an obsolete
function:
Do not generate warning:
#+begin_src lisp
(setq bar (inhibit-style-warnings (explode foo)))
#+end_src
If an optimizer needs to return a form with nested "bad-style" forms, there should
be an explicit inhibit-style-warnings wrapped around the nested forms.
By setting the compile-time value of inhibit-style-warning-switch you can enable
or disable some of the warning messages of the compiler. The compile-time value
of obsolete-function-warning-switch enables or
olete-function warnings in particular.



